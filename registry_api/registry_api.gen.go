// Package RegistryApi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package RegistryApi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// ArtifactMetaData defines model for ArtifactMetaData.
type ArtifactMetaData struct {
	CreatedBy   string    `json:"createdBy"`
	CreatedOn   int       `json:"createdOn"`
	Description *string   `json:"description,omitempty"`
	GlobalId    int64     `json:"globalId"`
	Id          string    `json:"id"`
	Labels      *[]string `json:"labels,omitempty"`
	ModifiedBy  string    `json:"modifiedBy"`
	ModifiedOn  int       `json:"modifiedOn"`
	Name        *string   `json:"name,omitempty"`

	// User-defined name-value pairs. Name and value must be strings.
	Properties *Properties `json:"properties,omitempty"`

	// Describes the state of an artifact or artifact version.  The following states
	// are possible:
	//
	// * ENABLED
	// * DISABLED
	// * DEPRECATED
	State   ArtifactState `json:"state"`
	Type    ArtifactType  `json:"type"`
	Version int64         `json:"version"`
}

// ArtifactSearchResults defines model for ArtifactSearchResults.
type ArtifactSearchResults struct {

	// The artifacts that matched the search criteria.
	Artifacts []SearchedArtifact `json:"artifacts"`

	// The total number of artifacts that matched the search criteria.
	Count int `json:"count"`
}

// ArtifactState defines model for ArtifactState.
type ArtifactState string

// List of ArtifactState
const (
	ArtifactState_DELETED    ArtifactState = "DELETED"
	ArtifactState_DEPRECATED ArtifactState = "DEPRECATED"
	ArtifactState_DISABLED   ArtifactState = "DISABLED"
	ArtifactState_ENABLED    ArtifactState = "ENABLED"
)

// ArtifactType defines model for ArtifactType.
type ArtifactType string

// List of ArtifactType
const (
	ArtifactType_ASYNCAPI    ArtifactType = "ASYNCAPI"
	ArtifactType_AVRO        ArtifactType = "AVRO"
	ArtifactType_GRAPHQL     ArtifactType = "GRAPHQL"
	ArtifactType_JSON        ArtifactType = "JSON"
	ArtifactType_KCONNECT    ArtifactType = "KCONNECT"
	ArtifactType_OPENAPI     ArtifactType = "OPENAPI"
	ArtifactType_PROTOBUF    ArtifactType = "PROTOBUF"
	ArtifactType_PROTOBUF_FD ArtifactType = "PROTOBUF_FD"
	ArtifactType_WSDL        ArtifactType = "WSDL"
	ArtifactType_XML         ArtifactType = "XML"
	ArtifactType_XSD         ArtifactType = "XSD"
)

// EditableMetaData defines model for EditableMetaData.
type EditableMetaData struct {
	Description *string   `json:"description,omitempty"`
	Labels      *[]string `json:"labels,omitempty"`
	Name        *string   `json:"name,omitempty"`

	// User-defined name-value pairs. Name and value must be strings.
	Properties *Properties `json:"properties,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// Full details about the error.  This might contain a server stack trace, for example.
	Detail *string `json:"detail,omitempty"`

	// The server-side error code.
	ErrorCode *int32 `json:"error_code,omitempty"`

	// The short error message.
	Message *string `json:"message,omitempty"`
}

// Properties defines model for Properties.
type Properties struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Rule defines model for Rule.
type Rule struct {
	Config string    `json:"config"`
	Type   *RuleType `json:"type,omitempty"`
}

// RuleType defines model for RuleType.
type RuleType string

// List of RuleType
const (
	RuleType_COMPATIBILITY RuleType = "COMPATIBILITY"
	RuleType_VALIDITY      RuleType = "VALIDITY"
)

// SearchedArtifact defines model for SearchedArtifact.
type SearchedArtifact struct {
	CreatedBy   string    `json:"createdBy"`
	CreatedOn   int       `json:"createdOn"`
	Description *string   `json:"description,omitempty"`
	Id          string    `json:"id"`
	Labels      *[]string `json:"labels,omitempty"`
	ModifiedBy  *string   `json:"modifiedBy,omitempty"`
	ModifiedOn  *int      `json:"modifiedOn,omitempty"`
	Name        *string   `json:"name,omitempty"`

	// Describes the state of an artifact or artifact version.  The following states
	// are possible:
	//
	// * ENABLED
	// * DISABLED
	// * DEPRECATED
	State ArtifactState `json:"state"`
	Type  ArtifactType  `json:"type"`
}

// SearchedVersion defines model for SearchedVersion.
type SearchedVersion struct {
	CreatedBy   string    `json:"createdBy"`
	CreatedOn   int       `json:"createdOn"`
	Description *string   `json:"description,omitempty"`
	GlobalId    int64     `json:"globalId"`
	Labels      *[]string `json:"labels,omitempty"`
	Name        *string   `json:"name,omitempty"`

	// Describes the state of an artifact or artifact version.  The following states
	// are possible:
	//
	// * ENABLED
	// * DISABLED
	// * DEPRECATED
	State   ArtifactState `json:"state"`
	Type    ArtifactType  `json:"type"`
	Version int32         `json:"version"`
}

// UpdateState defines model for UpdateState.
type UpdateState struct {

	// Describes the state of an artifact or artifact version.  The following states
	// are possible:
	//
	// * ENABLED
	// * DISABLED
	// * DEPRECATED
	State ArtifactState `json:"state"`
}

// VersionMetaData defines model for VersionMetaData.
type VersionMetaData struct {
	CreatedBy   string  `json:"createdBy"`
	CreatedOn   int     `json:"createdOn"`
	Description *string `json:"description,omitempty"`
	GlobalId    int64   `json:"globalId"`

	// The artifact id.
	Id     string    `json:"id"`
	Labels *[]string `json:"labels,omitempty"`
	Name   *string   `json:"name,omitempty"`

	// User-defined name-value pairs. Name and value must be strings.
	Properties *Properties `json:"properties,omitempty"`

	// Describes the state of an artifact or artifact version.  The following states
	// are possible:
	//
	// * ENABLED
	// * DISABLED
	// * DEPRECATED
	State   *ArtifactState `json:"state,omitempty"`
	Type    ArtifactType   `json:"type"`
	Version int64          `json:"version"`
}

// VersionSearchResults defines model for VersionSearchResults.
type VersionSearchResults struct {

	// The total number of artifacts that matched the search criteria.
	Count    int               `json:"count"`
	Versions []SearchedVersion `json:"versions"`
}

// BadRequest defines model for BadRequest.
type BadRequest Error

// Conflict defines model for Conflict.
type Conflict Error

// NotFound defines model for NotFound.
type NotFound Error

// ServerError defines model for ServerError.
type ServerError Error

// CreateArtifactParams defines parameters for CreateArtifact.
type CreateArtifactParams struct {

	// Set this option to instruct the server on what to do if the artifact already exists.
	IfExists *string `json:"ifExists,omitempty"`

	// Specifies the type of the artifact being added. Possible values include:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *string `json:"X-Registry-ArtifactType,omitempty"`

	// A client-provided, globally unique identifier for the new artifact.
	XRegistryArtifactId *string `json:"X-Registry-ArtifactId,omitempty"`
}

// UpdateArtifactParams defines parameters for UpdateArtifact.
type UpdateArtifactParams struct {

	// Specifies the type of the artifact being added.  Possible values include:
	//
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *string `json:"X-Registry-ArtifactType,omitempty"`
}

// GetArtifactMetaDataByContentJSONBody defines parameters for GetArtifactMetaDataByContent.
type GetArtifactMetaDataByContentJSONBody interface{}

// CreateArtifactRuleJSONBody defines parameters for CreateArtifactRule.
type CreateArtifactRuleJSONBody Rule

// UpdateArtifactRuleConfigJSONBody defines parameters for UpdateArtifactRuleConfig.
type UpdateArtifactRuleConfigJSONBody Rule

// UpdateArtifactStateJSONBody defines parameters for UpdateArtifactState.
type UpdateArtifactStateJSONBody UpdateState

// TestUpdateArtifactParams defines parameters for TestUpdateArtifact.
type TestUpdateArtifactParams struct {

	// This header parameter can be used to indicate the type of the artifact being added.  Possible values include:
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *string `json:"X-Registry-ArtifactType,omitempty"`
}

// CreateArtifactVersionParams defines parameters for CreateArtifactVersion.
type CreateArtifactVersionParams struct {

	// This header parameter can be used to indicate the type of the artifact being added. Possible values include:
	// * Avro (`AVRO`)
	// * Protobuf (`PROTOBUF`)
	// * Protobuf File Descriptor (`PROTOBUF_FD`)
	// * JSON Schema (`JSON`)
	// * Kafka Connect (`KCONNECT`)
	// * OpenAPI (`OPENAPI`)
	// * AsyncAPI (`ASYNCAPI`)
	// * GraphQL (`GRAPHQL`)
	// * Web Services Description Language (`WSDL`)
	// * XML Schema (`XSD`)
	XRegistryArtifactType *string `json:"X-Registry-ArtifactType,omitempty"`
}

// UpdateArtifactVersionMetaDataJSONBody defines parameters for UpdateArtifactVersionMetaData.
type UpdateArtifactVersionMetaDataJSONBody EditableMetaData

// UpdateArtifactVersionStateJSONBody defines parameters for UpdateArtifactVersionState.
type UpdateArtifactVersionStateJSONBody UpdateState

// CreateGlobalRuleJSONBody defines parameters for CreateGlobalRule.
type CreateGlobalRuleJSONBody Rule

// UpdateGlobalRuleConfigJSONBody defines parameters for UpdateGlobalRuleConfig.
type UpdateGlobalRuleConfigJSONBody Rule

// SearchArtifactsParams defines parameters for SearchArtifacts.
type SearchArtifactsParams struct {

	// The text to search.
	Search *string `json:"search,omitempty"`

	// The number of artifacts to skip before starting to collect the result set.
	Offset int `json:"offset"`

	// The number of artifacts to return.
	Limit int `json:"limit"`

	// What fields to search.
	Over *string `json:"over,omitempty"`

	// Sort order, ascending or descending.
	Order *string `json:"order,omitempty"`
}

// SearchVersionsParams defines parameters for SearchVersions.
type SearchVersionsParams struct {

	// The number of versions to skip before starting to collect the result set.
	Offset int `json:"offset"`

	// The number of versions to return.
	Limit int `json:"limit"`
}

// GetArtifactMetaDataByContentJSONRequestBody defines body for GetArtifactMetaDataByContent for application/json ContentType.
type GetArtifactMetaDataByContentJSONRequestBody GetArtifactMetaDataByContentJSONBody

// CreateArtifactRuleJSONRequestBody defines body for CreateArtifactRule for application/json ContentType.
type CreateArtifactRuleJSONRequestBody CreateArtifactRuleJSONBody

// UpdateArtifactRuleConfigJSONRequestBody defines body for UpdateArtifactRuleConfig for application/json ContentType.
type UpdateArtifactRuleConfigJSONRequestBody UpdateArtifactRuleConfigJSONBody

// UpdateArtifactStateJSONRequestBody defines body for UpdateArtifactState for application/json ContentType.
type UpdateArtifactStateJSONRequestBody UpdateArtifactStateJSONBody

// UpdateArtifactVersionMetaDataJSONRequestBody defines body for UpdateArtifactVersionMetaData for application/json ContentType.
type UpdateArtifactVersionMetaDataJSONRequestBody UpdateArtifactVersionMetaDataJSONBody

// UpdateArtifactVersionStateJSONRequestBody defines body for UpdateArtifactVersionState for application/json ContentType.
type UpdateArtifactVersionStateJSONRequestBody UpdateArtifactVersionStateJSONBody

// CreateGlobalRuleJSONRequestBody defines body for CreateGlobalRule for application/json ContentType.
type CreateGlobalRuleJSONRequestBody CreateGlobalRuleJSONBody

// UpdateGlobalRuleConfigJSONRequestBody defines body for UpdateGlobalRuleConfig for application/json ContentType.
type UpdateGlobalRuleConfigJSONRequestBody UpdateGlobalRuleConfigJSONBody

// Getter for additional properties for Properties. Returns the specified
// element and whether it was found
func (a Properties) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Properties
func (a *Properties) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Properties to handle AdditionalProperties
func (a *Properties) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Properties to handle AdditionalProperties
func (a Properties) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListArtifacts request
	ListArtifacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArtifact request  with any body
	CreateArtifactWithBody(ctx context.Context, params *CreateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifact request
	DeleteArtifact(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestArtifact request
	GetLatestArtifact(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifact request  with any body
	UpdateArtifactWithBody(ctx context.Context, artifactId string, params *UpdateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactMetaData request
	GetArtifactMetaData(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactMetaDataByContent request  with any body
	GetArtifactMetaDataByContentWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetArtifactMetaDataByContent(ctx context.Context, artifactId string, body GetArtifactMetaDataByContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactMetaData request  with any body
	UpdateArtifactMetaDataWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifactRules request
	DeleteArtifactRules(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtifactRules request
	ListArtifactRules(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArtifactRule request  with any body
	CreateArtifactRuleWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateArtifactRule(ctx context.Context, artifactId string, body CreateArtifactRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifactRule request
	DeleteArtifactRule(ctx context.Context, artifactId string, rule string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactRuleConfig request
	GetArtifactRuleConfig(ctx context.Context, artifactId string, rule string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactRuleConfig request  with any body
	UpdateArtifactRuleConfigWithBody(ctx context.Context, artifactId string, rule string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArtifactRuleConfig(ctx context.Context, artifactId string, rule string, body UpdateArtifactRuleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactState request  with any body
	UpdateArtifactStateWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArtifactState(ctx context.Context, artifactId string, body UpdateArtifactStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestUpdateArtifact request  with any body
	TestUpdateArtifactWithBody(ctx context.Context, artifactId string, params *TestUpdateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListArtifactVersions request
	ListArtifactVersions(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateArtifactVersion request  with any body
	CreateArtifactVersionWithBody(ctx context.Context, artifactId string, params *CreateArtifactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactVersion request
	GetArtifactVersion(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteArtifactVersionMetaData request
	DeleteArtifactVersionMetaData(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactVersionMetaData request
	GetArtifactVersionMetaData(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactVersionMetaData request  with any body
	UpdateArtifactVersionMetaDataWithBody(ctx context.Context, artifactId string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArtifactVersionMetaData(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionMetaDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateArtifactVersionState request  with any body
	UpdateArtifactVersionStateWithBody(ctx context.Context, artifactId string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateArtifactVersionState(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactByGlobalId request
	GetArtifactByGlobalId(ctx context.Context, globalId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetArtifactMetaDataByGlobalId request
	GetArtifactMetaDataByGlobalId(ctx context.Context, globalId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllGlobalRules request
	DeleteAllGlobalRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGlobalRules request
	ListGlobalRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGlobalRule request  with any body
	CreateGlobalRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGlobalRule(ctx context.Context, body CreateGlobalRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGlobalRule request
	DeleteGlobalRule(ctx context.Context, rule string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGlobalRuleConfig request
	GetGlobalRuleConfig(ctx context.Context, rule string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGlobalRuleConfig request  with any body
	UpdateGlobalRuleConfigWithBody(ctx context.Context, rule string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGlobalRuleConfig(ctx context.Context, rule string, body UpdateGlobalRuleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchArtifacts request
	SearchArtifacts(ctx context.Context, params *SearchArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchVersions request
	SearchVersions(ctx context.Context, artifactId string, params *SearchVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListArtifacts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtifactWithBody(ctx context.Context, params *CreateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtifactRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifact(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestArtifact(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestArtifactRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactWithBody(ctx context.Context, artifactId string, params *UpdateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactRequestWithBody(c.Server, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactMetaData(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactMetaDataRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactMetaDataByContentWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactMetaDataByContentRequestWithBody(c.Server, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactMetaDataByContent(ctx context.Context, artifactId string, body GetArtifactMetaDataByContentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactMetaDataByContentRequest(c.Server, artifactId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactMetaDataWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactMetaDataRequestWithBody(c.Server, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifactRules(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactRulesRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtifactRules(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactRulesRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtifactRuleWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtifactRuleRequestWithBody(c.Server, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtifactRule(ctx context.Context, artifactId string, body CreateArtifactRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtifactRuleRequest(c.Server, artifactId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifactRule(ctx context.Context, artifactId string, rule string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactRuleRequest(c.Server, artifactId, rule)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactRuleConfig(ctx context.Context, artifactId string, rule string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactRuleConfigRequest(c.Server, artifactId, rule)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactRuleConfigWithBody(ctx context.Context, artifactId string, rule string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactRuleConfigRequestWithBody(c.Server, artifactId, rule, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactRuleConfig(ctx context.Context, artifactId string, rule string, body UpdateArtifactRuleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactRuleConfigRequest(c.Server, artifactId, rule, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactStateWithBody(ctx context.Context, artifactId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactStateRequestWithBody(c.Server, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactState(ctx context.Context, artifactId string, body UpdateArtifactStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactStateRequest(c.Server, artifactId, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestUpdateArtifactWithBody(ctx context.Context, artifactId string, params *TestUpdateArtifactParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestUpdateArtifactRequestWithBody(c.Server, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListArtifactVersions(ctx context.Context, artifactId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListArtifactVersionsRequest(c.Server, artifactId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateArtifactVersionWithBody(ctx context.Context, artifactId string, params *CreateArtifactVersionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateArtifactVersionRequestWithBody(c.Server, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactVersion(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactVersionRequest(c.Server, artifactId, version)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteArtifactVersionMetaData(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteArtifactVersionMetaDataRequest(c.Server, artifactId, version)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactVersionMetaData(ctx context.Context, artifactId string, version int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactVersionMetaDataRequest(c.Server, artifactId, version)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactVersionMetaDataWithBody(ctx context.Context, artifactId string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactVersionMetaDataRequestWithBody(c.Server, artifactId, version, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactVersionMetaData(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionMetaDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactVersionMetaDataRequest(c.Server, artifactId, version, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactVersionStateWithBody(ctx context.Context, artifactId string, version int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactVersionStateRequestWithBody(c.Server, artifactId, version, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateArtifactVersionState(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateArtifactVersionStateRequest(c.Server, artifactId, version, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactByGlobalId(ctx context.Context, globalId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactByGlobalIdRequest(c.Server, globalId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetArtifactMetaDataByGlobalId(ctx context.Context, globalId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArtifactMetaDataByGlobalIdRequest(c.Server, globalId)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllGlobalRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllGlobalRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGlobalRules(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGlobalRulesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGlobalRule(ctx context.Context, body CreateGlobalRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGlobalRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGlobalRule(ctx context.Context, rule string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGlobalRuleRequest(c.Server, rule)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGlobalRuleConfig(ctx context.Context, rule string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGlobalRuleConfigRequest(c.Server, rule)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalRuleConfigWithBody(ctx context.Context, rule string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalRuleConfigRequestWithBody(c.Server, rule, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGlobalRuleConfig(ctx context.Context, rule string, body UpdateGlobalRuleConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGlobalRuleConfigRequest(c.Server, rule, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchArtifacts(ctx context.Context, params *SearchArtifactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchArtifactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchVersions(ctx context.Context, artifactId string, params *SearchVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchVersionsRequest(c.Server, artifactId, params)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListArtifactsRequest generates requests for ListArtifacts
func NewListArtifactsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArtifactRequestWithBody generates requests for CreateArtifact with any type of body
func NewCreateArtifactRequestWithBody(server string, params *CreateArtifactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.IfExists != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "ifExists", *params.IfExists); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XRegistryArtifactType != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-Registry-ArtifactType", *params.XRegistryArtifactType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Registry-ArtifactType", headerParam0)
	}

	if params.XRegistryArtifactId != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParam("simple", false, "X-Registry-ArtifactId", *params.XRegistryArtifactId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Registry-ArtifactId", headerParam1)
	}

	return req, nil
}

// NewDeleteArtifactRequest generates requests for DeleteArtifact
func NewDeleteArtifactRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestArtifactRequest generates requests for GetLatestArtifact
func NewGetLatestArtifactRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArtifactRequestWithBody generates requests for UpdateArtifact with any type of body
func NewUpdateArtifactRequestWithBody(server string, artifactId string, params *UpdateArtifactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XRegistryArtifactType != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-Registry-ArtifactType", *params.XRegistryArtifactType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Registry-ArtifactType", headerParam0)
	}

	return req, nil
}

// NewGetArtifactMetaDataRequest generates requests for GetArtifactMetaData
func NewGetArtifactMetaDataRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/meta", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactMetaDataByContentRequest calls the generic GetArtifactMetaDataByContent builder with application/json body
func NewGetArtifactMetaDataByContentRequest(server string, artifactId string, body GetArtifactMetaDataByContentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetArtifactMetaDataByContentRequestWithBody(server, artifactId, "application/json", bodyReader)
}

// NewGetArtifactMetaDataByContentRequestWithBody generates requests for GetArtifactMetaDataByContent with any type of body
func NewGetArtifactMetaDataByContentRequestWithBody(server string, artifactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/meta", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateArtifactMetaDataRequestWithBody generates requests for UpdateArtifactMetaData with any type of body
func NewUpdateArtifactMetaDataRequestWithBody(server string, artifactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/meta", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteArtifactRulesRequest generates requests for DeleteArtifactRules
func NewDeleteArtifactRulesRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListArtifactRulesRequest generates requests for ListArtifactRules
func NewListArtifactRulesRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArtifactRuleRequest calls the generic CreateArtifactRule builder with application/json body
func NewCreateArtifactRuleRequest(server string, artifactId string, body CreateArtifactRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateArtifactRuleRequestWithBody(server, artifactId, "application/json", bodyReader)
}

// NewCreateArtifactRuleRequestWithBody generates requests for CreateArtifactRule with any type of body
func NewCreateArtifactRuleRequestWithBody(server string, artifactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteArtifactRuleRequest generates requests for DeleteArtifactRule
func NewDeleteArtifactRuleRequest(server string, artifactId string, rule string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactRuleConfigRequest generates requests for GetArtifactRuleConfig
func NewGetArtifactRuleConfigRequest(server string, artifactId string, rule string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArtifactRuleConfigRequest calls the generic UpdateArtifactRuleConfig builder with application/json body
func NewUpdateArtifactRuleConfigRequest(server string, artifactId string, rule string, body UpdateArtifactRuleConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArtifactRuleConfigRequestWithBody(server, artifactId, rule, "application/json", bodyReader)
}

// NewUpdateArtifactRuleConfigRequestWithBody generates requests for UpdateArtifactRuleConfig with any type of body
func NewUpdateArtifactRuleConfigRequestWithBody(server string, artifactId string, rule string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/rules/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateArtifactStateRequest calls the generic UpdateArtifactState builder with application/json body
func NewUpdateArtifactStateRequest(server string, artifactId string, body UpdateArtifactStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArtifactStateRequestWithBody(server, artifactId, "application/json", bodyReader)
}

// NewUpdateArtifactStateRequestWithBody generates requests for UpdateArtifactState with any type of body
func NewUpdateArtifactStateRequestWithBody(server string, artifactId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/state", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestUpdateArtifactRequestWithBody generates requests for TestUpdateArtifact with any type of body
func NewTestUpdateArtifactRequestWithBody(server string, artifactId string, params *TestUpdateArtifactParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/test", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XRegistryArtifactType != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-Registry-ArtifactType", *params.XRegistryArtifactType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Registry-ArtifactType", headerParam0)
	}

	return req, nil
}

// NewListArtifactVersionsRequest generates requests for ListArtifactVersions
func NewListArtifactVersionsRequest(server string, artifactId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateArtifactVersionRequestWithBody generates requests for CreateArtifactVersion with any type of body
func NewCreateArtifactVersionRequestWithBody(server string, artifactId string, params *CreateArtifactVersionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XRegistryArtifactType != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-Registry-ArtifactType", *params.XRegistryArtifactType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Registry-ArtifactType", headerParam0)
	}

	return req, nil
}

// NewGetArtifactVersionRequest generates requests for GetArtifactVersion
func NewGetArtifactVersionRequest(server string, artifactId string, version int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteArtifactVersionMetaDataRequest generates requests for DeleteArtifactVersionMetaData
func NewDeleteArtifactVersionMetaDataRequest(server string, artifactId string, version int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions/%s/meta", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactVersionMetaDataRequest generates requests for GetArtifactVersionMetaData
func NewGetArtifactVersionMetaDataRequest(server string, artifactId string, version int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions/%s/meta", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateArtifactVersionMetaDataRequest calls the generic UpdateArtifactVersionMetaData builder with application/json body
func NewUpdateArtifactVersionMetaDataRequest(server string, artifactId string, version int, body UpdateArtifactVersionMetaDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArtifactVersionMetaDataRequestWithBody(server, artifactId, version, "application/json", bodyReader)
}

// NewUpdateArtifactVersionMetaDataRequestWithBody generates requests for UpdateArtifactVersionMetaData with any type of body
func NewUpdateArtifactVersionMetaDataRequestWithBody(server string, artifactId string, version int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions/%s/meta", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateArtifactVersionStateRequest calls the generic UpdateArtifactVersionState builder with application/json body
func NewUpdateArtifactVersionStateRequest(server string, artifactId string, version int, body UpdateArtifactVersionStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateArtifactVersionStateRequestWithBody(server, artifactId, version, "application/json", bodyReader)
}

// NewUpdateArtifactVersionStateRequestWithBody generates requests for UpdateArtifactVersionState with any type of body
func NewUpdateArtifactVersionStateRequestWithBody(server string, artifactId string, version int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "version", version)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/artifacts/%s/versions/%s/state", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetArtifactByGlobalIdRequest generates requests for GetArtifactByGlobalId
func NewGetArtifactByGlobalIdRequest(server string, globalId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "globalId", globalId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ids/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetArtifactMetaDataByGlobalIdRequest generates requests for GetArtifactMetaDataByGlobalId
func NewGetArtifactMetaDataByGlobalIdRequest(server string, globalId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "globalId", globalId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ids/%s/meta", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAllGlobalRulesRequest generates requests for DeleteAllGlobalRules
func NewDeleteAllGlobalRulesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGlobalRulesRequest generates requests for ListGlobalRules
func NewListGlobalRulesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGlobalRuleRequest calls the generic CreateGlobalRule builder with application/json body
func NewCreateGlobalRuleRequest(server string, body CreateGlobalRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGlobalRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGlobalRuleRequestWithBody generates requests for CreateGlobalRule with any type of body
func NewCreateGlobalRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGlobalRuleRequest generates requests for DeleteGlobalRule
func NewDeleteGlobalRuleRequest(server string, rule string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGlobalRuleConfigRequest generates requests for GetGlobalRuleConfig
func NewGetGlobalRuleConfigRequest(server string, rule string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGlobalRuleConfigRequest calls the generic UpdateGlobalRuleConfig builder with application/json body
func NewUpdateGlobalRuleConfigRequest(server string, rule string, body UpdateGlobalRuleConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGlobalRuleConfigRequestWithBody(server, rule, "application/json", bodyReader)
}

// NewUpdateGlobalRuleConfigRequestWithBody generates requests for UpdateGlobalRuleConfig with any type of body
func NewUpdateGlobalRuleConfigRequestWithBody(server string, rule string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "rule", rule)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchArtifactsRequest generates requests for SearchArtifacts
func NewSearchArtifactsRequest(server string, params *SearchArtifactsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/search/artifacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "search", *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "offset", params.Offset); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "limit", params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Over != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "over", *params.Over); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchVersionsRequest generates requests for SearchVersions
func NewSearchVersionsRequest(server string, artifactId string, params *SearchVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "artifactId", artifactId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/search/artifacts/%s/versions", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "offset", params.Offset); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "limit", params.Limit); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListArtifacts request
	ListArtifactsWithResponse(ctx context.Context) (*ListArtifactsResponse, error)

	// CreateArtifact request  with any body
	CreateArtifactWithBodyWithResponse(ctx context.Context, params *CreateArtifactParams, contentType string, body io.Reader) (*CreateArtifactResponse, error)

	// DeleteArtifact request
	DeleteArtifactWithResponse(ctx context.Context, artifactId string) (*DeleteArtifactResponse, error)

	// GetLatestArtifact request
	GetLatestArtifactWithResponse(ctx context.Context, artifactId string) (*GetLatestArtifactResponse, error)

	// UpdateArtifact request  with any body
	UpdateArtifactWithBodyWithResponse(ctx context.Context, artifactId string, params *UpdateArtifactParams, contentType string, body io.Reader) (*UpdateArtifactResponse, error)

	// GetArtifactMetaData request
	GetArtifactMetaDataWithResponse(ctx context.Context, artifactId string) (*GetArtifactMetaDataResponse, error)

	// GetArtifactMetaDataByContent request  with any body
	GetArtifactMetaDataByContentWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*GetArtifactMetaDataByContentResponse, error)

	GetArtifactMetaDataByContentWithResponse(ctx context.Context, artifactId string, body GetArtifactMetaDataByContentJSONRequestBody) (*GetArtifactMetaDataByContentResponse, error)

	// UpdateArtifactMetaData request  with any body
	UpdateArtifactMetaDataWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*UpdateArtifactMetaDataResponse, error)

	// DeleteArtifactRules request
	DeleteArtifactRulesWithResponse(ctx context.Context, artifactId string) (*DeleteArtifactRulesResponse, error)

	// ListArtifactRules request
	ListArtifactRulesWithResponse(ctx context.Context, artifactId string) (*ListArtifactRulesResponse, error)

	// CreateArtifactRule request  with any body
	CreateArtifactRuleWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*CreateArtifactRuleResponse, error)

	CreateArtifactRuleWithResponse(ctx context.Context, artifactId string, body CreateArtifactRuleJSONRequestBody) (*CreateArtifactRuleResponse, error)

	// DeleteArtifactRule request
	DeleteArtifactRuleWithResponse(ctx context.Context, artifactId string, rule string) (*DeleteArtifactRuleResponse, error)

	// GetArtifactRuleConfig request
	GetArtifactRuleConfigWithResponse(ctx context.Context, artifactId string, rule string) (*GetArtifactRuleConfigResponse, error)

	// UpdateArtifactRuleConfig request  with any body
	UpdateArtifactRuleConfigWithBodyWithResponse(ctx context.Context, artifactId string, rule string, contentType string, body io.Reader) (*UpdateArtifactRuleConfigResponse, error)

	UpdateArtifactRuleConfigWithResponse(ctx context.Context, artifactId string, rule string, body UpdateArtifactRuleConfigJSONRequestBody) (*UpdateArtifactRuleConfigResponse, error)

	// UpdateArtifactState request  with any body
	UpdateArtifactStateWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*UpdateArtifactStateResponse, error)

	UpdateArtifactStateWithResponse(ctx context.Context, artifactId string, body UpdateArtifactStateJSONRequestBody) (*UpdateArtifactStateResponse, error)

	// TestUpdateArtifact request  with any body
	TestUpdateArtifactWithBodyWithResponse(ctx context.Context, artifactId string, params *TestUpdateArtifactParams, contentType string, body io.Reader) (*TestUpdateArtifactResponse, error)

	// ListArtifactVersions request
	ListArtifactVersionsWithResponse(ctx context.Context, artifactId string) (*ListArtifactVersionsResponse, error)

	// CreateArtifactVersion request  with any body
	CreateArtifactVersionWithBodyWithResponse(ctx context.Context, artifactId string, params *CreateArtifactVersionParams, contentType string, body io.Reader) (*CreateArtifactVersionResponse, error)

	// GetArtifactVersion request
	GetArtifactVersionWithResponse(ctx context.Context, artifactId string, version int) (*GetArtifactVersionResponse, error)

	// DeleteArtifactVersionMetaData request
	DeleteArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int) (*DeleteArtifactVersionMetaDataResponse, error)

	// GetArtifactVersionMetaData request
	GetArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int) (*GetArtifactVersionMetaDataResponse, error)

	// UpdateArtifactVersionMetaData request  with any body
	UpdateArtifactVersionMetaDataWithBodyWithResponse(ctx context.Context, artifactId string, version int, contentType string, body io.Reader) (*UpdateArtifactVersionMetaDataResponse, error)

	UpdateArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionMetaDataJSONRequestBody) (*UpdateArtifactVersionMetaDataResponse, error)

	// UpdateArtifactVersionState request  with any body
	UpdateArtifactVersionStateWithBodyWithResponse(ctx context.Context, artifactId string, version int, contentType string, body io.Reader) (*UpdateArtifactVersionStateResponse, error)

	UpdateArtifactVersionStateWithResponse(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionStateJSONRequestBody) (*UpdateArtifactVersionStateResponse, error)

	// GetArtifactByGlobalId request
	GetArtifactByGlobalIdWithResponse(ctx context.Context, globalId int64) (*GetArtifactByGlobalIdResponse, error)

	// GetArtifactMetaDataByGlobalId request
	GetArtifactMetaDataByGlobalIdWithResponse(ctx context.Context, globalId int64) (*GetArtifactMetaDataByGlobalIdResponse, error)

	// DeleteAllGlobalRules request
	DeleteAllGlobalRulesWithResponse(ctx context.Context) (*DeleteAllGlobalRulesResponse, error)

	// ListGlobalRules request
	ListGlobalRulesWithResponse(ctx context.Context) (*ListGlobalRulesResponse, error)

	// CreateGlobalRule request  with any body
	CreateGlobalRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateGlobalRuleResponse, error)

	CreateGlobalRuleWithResponse(ctx context.Context, body CreateGlobalRuleJSONRequestBody) (*CreateGlobalRuleResponse, error)

	// DeleteGlobalRule request
	DeleteGlobalRuleWithResponse(ctx context.Context, rule string) (*DeleteGlobalRuleResponse, error)

	// GetGlobalRuleConfig request
	GetGlobalRuleConfigWithResponse(ctx context.Context, rule string) (*GetGlobalRuleConfigResponse, error)

	// UpdateGlobalRuleConfig request  with any body
	UpdateGlobalRuleConfigWithBodyWithResponse(ctx context.Context, rule string, contentType string, body io.Reader) (*UpdateGlobalRuleConfigResponse, error)

	UpdateGlobalRuleConfigWithResponse(ctx context.Context, rule string, body UpdateGlobalRuleConfigJSONRequestBody) (*UpdateGlobalRuleConfigResponse, error)

	// SearchArtifacts request
	SearchArtifactsWithResponse(ctx context.Context, params *SearchArtifactsParams) (*SearchArtifactsResponse, error)

	// SearchVersions request
	SearchVersionsWithResponse(ctx context.Context, artifactId string, params *SearchVersionsParams) (*SearchVersionsResponse, error)
}

type ListArtifactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListArtifactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtifactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactMetaData
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetLatestArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactMetaData
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactMetaDataByContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactMetaDataByContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactMetaDataByContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtifactRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RuleType
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListArtifactRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtifactRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArtifactRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateArtifactRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArtifactRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactRuleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactRuleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactRuleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactRuleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactRuleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactRuleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestUpdateArtifactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r TestUpdateArtifactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestUpdateArtifactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListArtifactVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]int64
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListArtifactVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListArtifactVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateArtifactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionMetaData
	JSON404      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateArtifactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateArtifactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteArtifactVersionMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteArtifactVersionMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteArtifactVersionMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactVersionMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactVersionMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactVersionMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactVersionMetaDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactVersionMetaDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactVersionMetaDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateArtifactVersionStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateArtifactVersionStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateArtifactVersionStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactByGlobalIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetArtifactByGlobalIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactByGlobalIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetArtifactMetaDataByGlobalIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactMetaData
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetArtifactMetaDataByGlobalIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArtifactMetaDataByGlobalIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllGlobalRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAllGlobalRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllGlobalRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGlobalRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RuleType
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListGlobalRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGlobalRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGlobalRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON409      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateGlobalRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGlobalRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGlobalRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteGlobalRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGlobalRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGlobalRuleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetGlobalRuleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGlobalRuleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGlobalRuleConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateGlobalRuleConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGlobalRuleConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchArtifactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArtifactSearchResults
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SearchArtifactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchArtifactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionSearchResults
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r SearchVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListArtifactsWithResponse request returning *ListArtifactsResponse
func (c *ClientWithResponses) ListArtifactsWithResponse(ctx context.Context) (*ListArtifactsResponse, error) {
	rsp, err := c.ListArtifacts(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactsResponse(rsp)
}

// CreateArtifactWithBodyWithResponse request with arbitrary body returning *CreateArtifactResponse
func (c *ClientWithResponses) CreateArtifactWithBodyWithResponse(ctx context.Context, params *CreateArtifactParams, contentType string, body io.Reader) (*CreateArtifactResponse, error) {
	rsp, err := c.CreateArtifactWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtifactResponse(rsp)
}

// DeleteArtifactWithResponse request returning *DeleteArtifactResponse
func (c *ClientWithResponses) DeleteArtifactWithResponse(ctx context.Context, artifactId string) (*DeleteArtifactResponse, error) {
	rsp, err := c.DeleteArtifact(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactResponse(rsp)
}

// GetLatestArtifactWithResponse request returning *GetLatestArtifactResponse
func (c *ClientWithResponses) GetLatestArtifactWithResponse(ctx context.Context, artifactId string) (*GetLatestArtifactResponse, error) {
	rsp, err := c.GetLatestArtifact(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestArtifactResponse(rsp)
}

// UpdateArtifactWithBodyWithResponse request with arbitrary body returning *UpdateArtifactResponse
func (c *ClientWithResponses) UpdateArtifactWithBodyWithResponse(ctx context.Context, artifactId string, params *UpdateArtifactParams, contentType string, body io.Reader) (*UpdateArtifactResponse, error) {
	rsp, err := c.UpdateArtifactWithBody(ctx, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactResponse(rsp)
}

// GetArtifactMetaDataWithResponse request returning *GetArtifactMetaDataResponse
func (c *ClientWithResponses) GetArtifactMetaDataWithResponse(ctx context.Context, artifactId string) (*GetArtifactMetaDataResponse, error) {
	rsp, err := c.GetArtifactMetaData(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactMetaDataResponse(rsp)
}

// GetArtifactMetaDataByContentWithBodyWithResponse request with arbitrary body returning *GetArtifactMetaDataByContentResponse
func (c *ClientWithResponses) GetArtifactMetaDataByContentWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*GetArtifactMetaDataByContentResponse, error) {
	rsp, err := c.GetArtifactMetaDataByContentWithBody(ctx, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactMetaDataByContentResponse(rsp)
}

func (c *ClientWithResponses) GetArtifactMetaDataByContentWithResponse(ctx context.Context, artifactId string, body GetArtifactMetaDataByContentJSONRequestBody) (*GetArtifactMetaDataByContentResponse, error) {
	rsp, err := c.GetArtifactMetaDataByContent(ctx, artifactId, body)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactMetaDataByContentResponse(rsp)
}

// UpdateArtifactMetaDataWithBodyWithResponse request with arbitrary body returning *UpdateArtifactMetaDataResponse
func (c *ClientWithResponses) UpdateArtifactMetaDataWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*UpdateArtifactMetaDataResponse, error) {
	rsp, err := c.UpdateArtifactMetaDataWithBody(ctx, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactMetaDataResponse(rsp)
}

// DeleteArtifactRulesWithResponse request returning *DeleteArtifactRulesResponse
func (c *ClientWithResponses) DeleteArtifactRulesWithResponse(ctx context.Context, artifactId string) (*DeleteArtifactRulesResponse, error) {
	rsp, err := c.DeleteArtifactRules(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactRulesResponse(rsp)
}

// ListArtifactRulesWithResponse request returning *ListArtifactRulesResponse
func (c *ClientWithResponses) ListArtifactRulesWithResponse(ctx context.Context, artifactId string) (*ListArtifactRulesResponse, error) {
	rsp, err := c.ListArtifactRules(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactRulesResponse(rsp)
}

// CreateArtifactRuleWithBodyWithResponse request with arbitrary body returning *CreateArtifactRuleResponse
func (c *ClientWithResponses) CreateArtifactRuleWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*CreateArtifactRuleResponse, error) {
	rsp, err := c.CreateArtifactRuleWithBody(ctx, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtifactRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateArtifactRuleWithResponse(ctx context.Context, artifactId string, body CreateArtifactRuleJSONRequestBody) (*CreateArtifactRuleResponse, error) {
	rsp, err := c.CreateArtifactRule(ctx, artifactId, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtifactRuleResponse(rsp)
}

// DeleteArtifactRuleWithResponse request returning *DeleteArtifactRuleResponse
func (c *ClientWithResponses) DeleteArtifactRuleWithResponse(ctx context.Context, artifactId string, rule string) (*DeleteArtifactRuleResponse, error) {
	rsp, err := c.DeleteArtifactRule(ctx, artifactId, rule)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactRuleResponse(rsp)
}

// GetArtifactRuleConfigWithResponse request returning *GetArtifactRuleConfigResponse
func (c *ClientWithResponses) GetArtifactRuleConfigWithResponse(ctx context.Context, artifactId string, rule string) (*GetArtifactRuleConfigResponse, error) {
	rsp, err := c.GetArtifactRuleConfig(ctx, artifactId, rule)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactRuleConfigResponse(rsp)
}

// UpdateArtifactRuleConfigWithBodyWithResponse request with arbitrary body returning *UpdateArtifactRuleConfigResponse
func (c *ClientWithResponses) UpdateArtifactRuleConfigWithBodyWithResponse(ctx context.Context, artifactId string, rule string, contentType string, body io.Reader) (*UpdateArtifactRuleConfigResponse, error) {
	rsp, err := c.UpdateArtifactRuleConfigWithBody(ctx, artifactId, rule, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactRuleConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateArtifactRuleConfigWithResponse(ctx context.Context, artifactId string, rule string, body UpdateArtifactRuleConfigJSONRequestBody) (*UpdateArtifactRuleConfigResponse, error) {
	rsp, err := c.UpdateArtifactRuleConfig(ctx, artifactId, rule, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactRuleConfigResponse(rsp)
}

// UpdateArtifactStateWithBodyWithResponse request with arbitrary body returning *UpdateArtifactStateResponse
func (c *ClientWithResponses) UpdateArtifactStateWithBodyWithResponse(ctx context.Context, artifactId string, contentType string, body io.Reader) (*UpdateArtifactStateResponse, error) {
	rsp, err := c.UpdateArtifactStateWithBody(ctx, artifactId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactStateResponse(rsp)
}

func (c *ClientWithResponses) UpdateArtifactStateWithResponse(ctx context.Context, artifactId string, body UpdateArtifactStateJSONRequestBody) (*UpdateArtifactStateResponse, error) {
	rsp, err := c.UpdateArtifactState(ctx, artifactId, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactStateResponse(rsp)
}

// TestUpdateArtifactWithBodyWithResponse request with arbitrary body returning *TestUpdateArtifactResponse
func (c *ClientWithResponses) TestUpdateArtifactWithBodyWithResponse(ctx context.Context, artifactId string, params *TestUpdateArtifactParams, contentType string, body io.Reader) (*TestUpdateArtifactResponse, error) {
	rsp, err := c.TestUpdateArtifactWithBody(ctx, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseTestUpdateArtifactResponse(rsp)
}

// ListArtifactVersionsWithResponse request returning *ListArtifactVersionsResponse
func (c *ClientWithResponses) ListArtifactVersionsWithResponse(ctx context.Context, artifactId string) (*ListArtifactVersionsResponse, error) {
	rsp, err := c.ListArtifactVersions(ctx, artifactId)
	if err != nil {
		return nil, err
	}
	return ParseListArtifactVersionsResponse(rsp)
}

// CreateArtifactVersionWithBodyWithResponse request with arbitrary body returning *CreateArtifactVersionResponse
func (c *ClientWithResponses) CreateArtifactVersionWithBodyWithResponse(ctx context.Context, artifactId string, params *CreateArtifactVersionParams, contentType string, body io.Reader) (*CreateArtifactVersionResponse, error) {
	rsp, err := c.CreateArtifactVersionWithBody(ctx, artifactId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateArtifactVersionResponse(rsp)
}

// GetArtifactVersionWithResponse request returning *GetArtifactVersionResponse
func (c *ClientWithResponses) GetArtifactVersionWithResponse(ctx context.Context, artifactId string, version int) (*GetArtifactVersionResponse, error) {
	rsp, err := c.GetArtifactVersion(ctx, artifactId, version)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactVersionResponse(rsp)
}

// DeleteArtifactVersionMetaDataWithResponse request returning *DeleteArtifactVersionMetaDataResponse
func (c *ClientWithResponses) DeleteArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int) (*DeleteArtifactVersionMetaDataResponse, error) {
	rsp, err := c.DeleteArtifactVersionMetaData(ctx, artifactId, version)
	if err != nil {
		return nil, err
	}
	return ParseDeleteArtifactVersionMetaDataResponse(rsp)
}

// GetArtifactVersionMetaDataWithResponse request returning *GetArtifactVersionMetaDataResponse
func (c *ClientWithResponses) GetArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int) (*GetArtifactVersionMetaDataResponse, error) {
	rsp, err := c.GetArtifactVersionMetaData(ctx, artifactId, version)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactVersionMetaDataResponse(rsp)
}

// UpdateArtifactVersionMetaDataWithBodyWithResponse request with arbitrary body returning *UpdateArtifactVersionMetaDataResponse
func (c *ClientWithResponses) UpdateArtifactVersionMetaDataWithBodyWithResponse(ctx context.Context, artifactId string, version int, contentType string, body io.Reader) (*UpdateArtifactVersionMetaDataResponse, error) {
	rsp, err := c.UpdateArtifactVersionMetaDataWithBody(ctx, artifactId, version, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactVersionMetaDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateArtifactVersionMetaDataWithResponse(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionMetaDataJSONRequestBody) (*UpdateArtifactVersionMetaDataResponse, error) {
	rsp, err := c.UpdateArtifactVersionMetaData(ctx, artifactId, version, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactVersionMetaDataResponse(rsp)
}

// UpdateArtifactVersionStateWithBodyWithResponse request with arbitrary body returning *UpdateArtifactVersionStateResponse
func (c *ClientWithResponses) UpdateArtifactVersionStateWithBodyWithResponse(ctx context.Context, artifactId string, version int, contentType string, body io.Reader) (*UpdateArtifactVersionStateResponse, error) {
	rsp, err := c.UpdateArtifactVersionStateWithBody(ctx, artifactId, version, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactVersionStateResponse(rsp)
}

func (c *ClientWithResponses) UpdateArtifactVersionStateWithResponse(ctx context.Context, artifactId string, version int, body UpdateArtifactVersionStateJSONRequestBody) (*UpdateArtifactVersionStateResponse, error) {
	rsp, err := c.UpdateArtifactVersionState(ctx, artifactId, version, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateArtifactVersionStateResponse(rsp)
}

// GetArtifactByGlobalIdWithResponse request returning *GetArtifactByGlobalIdResponse
func (c *ClientWithResponses) GetArtifactByGlobalIdWithResponse(ctx context.Context, globalId int64) (*GetArtifactByGlobalIdResponse, error) {
	rsp, err := c.GetArtifactByGlobalId(ctx, globalId)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactByGlobalIdResponse(rsp)
}

// GetArtifactMetaDataByGlobalIdWithResponse request returning *GetArtifactMetaDataByGlobalIdResponse
func (c *ClientWithResponses) GetArtifactMetaDataByGlobalIdWithResponse(ctx context.Context, globalId int64) (*GetArtifactMetaDataByGlobalIdResponse, error) {
	rsp, err := c.GetArtifactMetaDataByGlobalId(ctx, globalId)
	if err != nil {
		return nil, err
	}
	return ParseGetArtifactMetaDataByGlobalIdResponse(rsp)
}

// DeleteAllGlobalRulesWithResponse request returning *DeleteAllGlobalRulesResponse
func (c *ClientWithResponses) DeleteAllGlobalRulesWithResponse(ctx context.Context) (*DeleteAllGlobalRulesResponse, error) {
	rsp, err := c.DeleteAllGlobalRules(ctx)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllGlobalRulesResponse(rsp)
}

// ListGlobalRulesWithResponse request returning *ListGlobalRulesResponse
func (c *ClientWithResponses) ListGlobalRulesWithResponse(ctx context.Context) (*ListGlobalRulesResponse, error) {
	rsp, err := c.ListGlobalRules(ctx)
	if err != nil {
		return nil, err
	}
	return ParseListGlobalRulesResponse(rsp)
}

// CreateGlobalRuleWithBodyWithResponse request with arbitrary body returning *CreateGlobalRuleResponse
func (c *ClientWithResponses) CreateGlobalRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateGlobalRuleResponse, error) {
	rsp, err := c.CreateGlobalRuleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateGlobalRuleWithResponse(ctx context.Context, body CreateGlobalRuleJSONRequestBody) (*CreateGlobalRuleResponse, error) {
	rsp, err := c.CreateGlobalRule(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateGlobalRuleResponse(rsp)
}

// DeleteGlobalRuleWithResponse request returning *DeleteGlobalRuleResponse
func (c *ClientWithResponses) DeleteGlobalRuleWithResponse(ctx context.Context, rule string) (*DeleteGlobalRuleResponse, error) {
	rsp, err := c.DeleteGlobalRule(ctx, rule)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGlobalRuleResponse(rsp)
}

// GetGlobalRuleConfigWithResponse request returning *GetGlobalRuleConfigResponse
func (c *ClientWithResponses) GetGlobalRuleConfigWithResponse(ctx context.Context, rule string) (*GetGlobalRuleConfigResponse, error) {
	rsp, err := c.GetGlobalRuleConfig(ctx, rule)
	if err != nil {
		return nil, err
	}
	return ParseGetGlobalRuleConfigResponse(rsp)
}

// UpdateGlobalRuleConfigWithBodyWithResponse request with arbitrary body returning *UpdateGlobalRuleConfigResponse
func (c *ClientWithResponses) UpdateGlobalRuleConfigWithBodyWithResponse(ctx context.Context, rule string, contentType string, body io.Reader) (*UpdateGlobalRuleConfigResponse, error) {
	rsp, err := c.UpdateGlobalRuleConfigWithBody(ctx, rule, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalRuleConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateGlobalRuleConfigWithResponse(ctx context.Context, rule string, body UpdateGlobalRuleConfigJSONRequestBody) (*UpdateGlobalRuleConfigResponse, error) {
	rsp, err := c.UpdateGlobalRuleConfig(ctx, rule, body)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGlobalRuleConfigResponse(rsp)
}

// SearchArtifactsWithResponse request returning *SearchArtifactsResponse
func (c *ClientWithResponses) SearchArtifactsWithResponse(ctx context.Context, params *SearchArtifactsParams) (*SearchArtifactsResponse, error) {
	rsp, err := c.SearchArtifacts(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseSearchArtifactsResponse(rsp)
}

// SearchVersionsWithResponse request returning *SearchVersionsResponse
func (c *ClientWithResponses) SearchVersionsWithResponse(ctx context.Context, artifactId string, params *SearchVersionsParams) (*SearchVersionsResponse, error) {
	rsp, err := c.SearchVersions(ctx, artifactId, params)
	if err != nil {
		return nil, err
	}
	return ParseSearchVersionsResponse(rsp)
}

// ParseListArtifactsResponse parses an HTTP response from a ListArtifactsWithResponse call
func ParseListArtifactsResponse(rsp *http.Response) (*ListArtifactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListArtifactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateArtifactResponse parses an HTTP response from a CreateArtifactWithResponse call
func ParseCreateArtifactResponse(rsp *http.Response) (*CreateArtifactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactResponse parses an HTTP response from a DeleteArtifactWithResponse call
func ParseDeleteArtifactResponse(rsp *http.Response) (*DeleteArtifactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetLatestArtifactResponse parses an HTTP response from a GetLatestArtifactWithResponse call
func ParseGetLatestArtifactResponse(rsp *http.Response) (*GetLatestArtifactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLatestArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactResponse parses an HTTP response from a UpdateArtifactWithResponse call
func ParseUpdateArtifactResponse(rsp *http.Response) (*UpdateArtifactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactMetaDataResponse parses an HTTP response from a GetArtifactMetaDataWithResponse call
func ParseGetArtifactMetaDataResponse(rsp *http.Response) (*GetArtifactMetaDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactMetaDataByContentResponse parses an HTTP response from a GetArtifactMetaDataByContentWithResponse call
func ParseGetArtifactMetaDataByContentResponse(rsp *http.Response) (*GetArtifactMetaDataByContentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactMetaDataByContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactMetaDataResponse parses an HTTP response from a UpdateArtifactMetaDataWithResponse call
func ParseUpdateArtifactMetaDataResponse(rsp *http.Response) (*UpdateArtifactMetaDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactRulesResponse parses an HTTP response from a DeleteArtifactRulesWithResponse call
func ParseDeleteArtifactRulesResponse(rsp *http.Response) (*DeleteArtifactRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListArtifactRulesResponse parses an HTTP response from a ListArtifactRulesWithResponse call
func ParseListArtifactRulesResponse(rsp *http.Response) (*ListArtifactRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListArtifactRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateArtifactRuleResponse parses an HTTP response from a CreateArtifactRuleWithResponse call
func ParseCreateArtifactRuleResponse(rsp *http.Response) (*CreateArtifactRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateArtifactRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactRuleResponse parses an HTTP response from a DeleteArtifactRuleWithResponse call
func ParseDeleteArtifactRuleResponse(rsp *http.Response) (*DeleteArtifactRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactRuleConfigResponse parses an HTTP response from a GetArtifactRuleConfigWithResponse call
func ParseGetArtifactRuleConfigResponse(rsp *http.Response) (*GetArtifactRuleConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactRuleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactRuleConfigResponse parses an HTTP response from a UpdateArtifactRuleConfigWithResponse call
func ParseUpdateArtifactRuleConfigResponse(rsp *http.Response) (*UpdateArtifactRuleConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactRuleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactStateResponse parses an HTTP response from a UpdateArtifactStateWithResponse call
func ParseUpdateArtifactStateResponse(rsp *http.Response) (*UpdateArtifactStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTestUpdateArtifactResponse parses an HTTP response from a TestUpdateArtifactWithResponse call
func ParseTestUpdateArtifactResponse(rsp *http.Response) (*TestUpdateArtifactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &TestUpdateArtifactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListArtifactVersionsResponse parses an HTTP response from a ListArtifactVersionsWithResponse call
func ParseListArtifactVersionsResponse(rsp *http.Response) (*ListArtifactVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListArtifactVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateArtifactVersionResponse parses an HTTP response from a CreateArtifactVersionWithResponse call
func ParseCreateArtifactVersionResponse(rsp *http.Response) (*CreateArtifactVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateArtifactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactVersionResponse parses an HTTP response from a GetArtifactVersionWithResponse call
func ParseGetArtifactVersionResponse(rsp *http.Response) (*GetArtifactVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteArtifactVersionMetaDataResponse parses an HTTP response from a DeleteArtifactVersionMetaDataWithResponse call
func ParseDeleteArtifactVersionMetaDataResponse(rsp *http.Response) (*DeleteArtifactVersionMetaDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteArtifactVersionMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactVersionMetaDataResponse parses an HTTP response from a GetArtifactVersionMetaDataWithResponse call
func ParseGetArtifactVersionMetaDataResponse(rsp *http.Response) (*GetArtifactVersionMetaDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactVersionMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactVersionMetaDataResponse parses an HTTP response from a UpdateArtifactVersionMetaDataWithResponse call
func ParseUpdateArtifactVersionMetaDataResponse(rsp *http.Response) (*UpdateArtifactVersionMetaDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactVersionMetaDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateArtifactVersionStateResponse parses an HTTP response from a UpdateArtifactVersionStateWithResponse call
func ParseUpdateArtifactVersionStateResponse(rsp *http.Response) (*UpdateArtifactVersionStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateArtifactVersionStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetArtifactByGlobalIdResponse parses an HTTP response from a GetArtifactByGlobalIdWithResponse call
func ParseGetArtifactByGlobalIdResponse(rsp *http.Response) (*GetArtifactByGlobalIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactByGlobalIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetArtifactMetaDataByGlobalIdResponse parses an HTTP response from a GetArtifactMetaDataByGlobalIdWithResponse call
func ParseGetArtifactMetaDataByGlobalIdResponse(rsp *http.Response) (*GetArtifactMetaDataByGlobalIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetArtifactMetaDataByGlobalIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactMetaData
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAllGlobalRulesResponse parses an HTTP response from a DeleteAllGlobalRulesWithResponse call
func ParseDeleteAllGlobalRulesResponse(rsp *http.Response) (*DeleteAllGlobalRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllGlobalRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListGlobalRulesResponse parses an HTTP response from a ListGlobalRulesWithResponse call
func ParseListGlobalRulesResponse(rsp *http.Response) (*ListGlobalRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ListGlobalRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateGlobalRuleResponse parses an HTTP response from a CreateGlobalRuleWithResponse call
func ParseCreateGlobalRuleResponse(rsp *http.Response) (*CreateGlobalRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateGlobalRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGlobalRuleResponse parses an HTTP response from a DeleteGlobalRuleWithResponse call
func ParseDeleteGlobalRuleResponse(rsp *http.Response) (*DeleteGlobalRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteGlobalRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGlobalRuleConfigResponse parses an HTTP response from a GetGlobalRuleConfigWithResponse call
func ParseGetGlobalRuleConfigResponse(rsp *http.Response) (*GetGlobalRuleConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetGlobalRuleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateGlobalRuleConfigResponse parses an HTTP response from a UpdateGlobalRuleConfigWithResponse call
func ParseUpdateGlobalRuleConfigResponse(rsp *http.Response) (*UpdateGlobalRuleConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UpdateGlobalRuleConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSearchArtifactsResponse parses an HTTP response from a SearchArtifactsWithResponse call
func ParseSearchArtifactsResponse(rsp *http.Response) (*SearchArtifactsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchArtifactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArtifactSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSearchVersionsResponse parses an HTTP response from a SearchVersionsWithResponse call
func ParseSearchVersionsResponse(rsp *http.Response) (*SearchVersionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SearchVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionSearchResults
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
