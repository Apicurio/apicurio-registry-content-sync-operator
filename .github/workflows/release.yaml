name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'main'

jobs:

  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Apicurio'
    steps:

      # Log some basic info
      - name: Log Metadata
        run: |
          echo "Releasing Apicurio Registry Content Sync Operator version ${{ github.event.inputs.release-version }} from branch ${{ github.event.inputs.branch }}"
          echo "Next Snapshot version will be ${{ github.event.inputs.snapshot-version }}"

      # Install java
      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      # Verify the java version
      - name: Check Java Version
        run: java -version

      # Set up maven
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: '3.8.5'

      # Verify mvn version
      - name: Check Maven Version
        run: mvn --version

      # Checkout the code
      - name: Code Checkout
        run: |
          git init
          git config --global user.name "apicurio-ci"
          git config --global user.email "apicurio.ci@gmail.com"
          git remote add origin "https://apicurio-ci:${{ secrets.ACCESS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
          git fetch
          git checkout ${{ github.event.inputs.branch}}
          git branch --set-upstream-to=origin/${{ github.event.inputs.branch}}
          git pull
          echo "#### Listing files after clone ####"
          find .
      
      # To avoid permission denied issues 
      - name: Give full Permissions
        run: chmod -R 777 $(pwd)
        
      # Update the pom.xml with the new release version
      - name: Update Release Version ${{ github.event.inputs.release-version}}
        run: mvn versions:set -DnewVersion=${{ github.event.inputs.release-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

      # Run unit tests, build container image and build kubernetes dist
      - name: Build
        run: |
          mvn package -Pbuild-image --no-transfer-progress -DtrimStackTrace=false

      # Check that the kubernetes manifests in deploy folder are the same as the manifests built in dist folder
      - name: Setup deploy manifests
        run: ./check-deploy-manifests.sh

      # Set up k8s so we can run tests
      - name: Setup Kubernetes
        run: |
          sudo curl https://raw.githubusercontent.com/andreaTP/skind/main/skind --output skind
          sudo chmod +x skind
          sudo mv skind /usr/local/bin/skind
          skind start
          skind status

      # Tag and push container image to minikube image registry and deploy the operator to setup test env
      - name: setup e2e tests
        run: ./e2e/scripts/prepare-env.sh

      # Execute e2e tests that expect the kubernetes cluster to be running and with the operator deployed
      - name: e2e tests
        run: mvn verify -Pe2e -pl e2e -am --no-transfer-progress -DtrimStackTrace=false

      # Commit the release version to GH
      - name: Commit Release Version Change
        run: |
          git add .
          git commit -m "Automated version update: ${{ github.event.inputs.release-version}}"
          git push

      # Import GPG key so we can do a GH release
      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v5
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      # Create a GH release.
      - name: Create GitHub Release
        run: ./.github/scripts/create-github-release.sh ${{ github.event.inputs.release-version}} ${{ github.event.inputs.branch}} $GITHUB_REPOSITORY ${{ secrets.ACCESS_TOKEN }}

      # Log in to quay so we can push images
      - name: Login to Quay.io Registry
        run: docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      # Push release container images to quay
      - name: Tag and push container image
        run: |
          COMMIT_HASH="$(git log --pretty=format:'%h' -n 1)"
          docker tag quay.io/apicurio/apicurio-registry-kube-sync:latest-release quay.io/apicurio/apicurio-registry-kube-sync:$COMMIT_HASH
          docker tag quay.io/apicurio/apicurio-registry-kube-sync:${{ github.event.inputs.release-version }} quay.io/apicurio/apicurio-registry-kube-sync:$COMMIT_HASH
          docker push quay.io/apicurio/apicurio-registry-kube-sync:$COMMIT_HASH
          docker push quay.io/apicurio/apicurio-registry-kube-sync:latest-release
          docker push quay.io/apicurio/apicurio-registry-kube-sync:${{ github.event.inputs.release-version }}

      # update the snapshot version in the pom.xml
      - name: Update Snapshot version ${{ github.event.inputs.snapshot-version}}
        run: mvn versions:set -DnewVersion=${{ github.event.inputs.snapshot-version}} -DgenerateBackupPoms=false -DprocessAllModules=true

      # Commit the new snapshot version to git
      - name: Commit Snapshot Version Change
        run: |
          git add .
          git restore --staged .npmrc    # can't commit, contains NPM token
          git commit -m"Automated version update: ${{ github.event.inputs.snapshot-version}}"
          git push

      # Google chat integration
      - name: Google Chat Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
